<!--https://www.redblobgames.com/grids/hexagons/implementation.html-->

<div class="game"
  {{did-insert (action this.setupGame)}}
  {{will-destroy (action this.teardown)}}
  >
  <div class="game-container">
    <div class="epm-modal-container {{this.epmModalContainerClass}}">
      <EpmModalContainer/>
    </div>
    <div class="header">
      <h2>GeoQuest - Octane</h2>
      <div class="zoom">
        <PressAndHoldButton @press={{perform this.camera.scaleStageBy -1}} @release={{cancel-all this.camera.scaleStageBy}}>--</PressAndHoldButton>
        <input type="range" id="zoom" name="zoom" min="0" max="100" value="{{this.camera.stageScaleDisplay}}" step="10">
        <PressAndHoldButton @press={{perform this.camera.scaleStageBy 1}} @release={{cancel-all this.camera.scaleStageBy}}>++</PressAndHoldButton>
      </div>
      <div class="game-controls">
        <button class="btn inventory" {{on "click" (fn showInventory)}} >
          <EmberTooltip tooltipClass="tooltip-controls" >Inventory</EmberTooltip>
        </button>
        <button class="btn trophy" {{on "click" (fn saveGame)}}>
          <EmberTooltip tooltipClass="tooltip-controls" >Awards</EmberTooltip>
        </button>
        <button class="btn gems" {{on "click" (fn clickGems)}}>
          <EmberTooltip tooltipClass="tooltip-controls">Gems</EmberTooltip>
        </button>
        <button class="btn settings" {{on "click" (fn showConfigDialog)}} >
          <EmberTooltip tooltipClass="tooltip-controls" >Settings</EmberTooltip>
        </button>
      </div>

    </div>
    <AnimatedContainer class="gameboard">
      <section>
        <LargeMap
          @backgroundImageHeight="{{this.mapService.emberDataMap.backgroundFinalHeight}}px"
          @backgroundImageWidth="{{this.mapService.emberDataMap.backgroundFinalWidth}}px"
        />
      </section>
    </AnimatedContainer>

    <div class="debugWrapper">
      {{#if this.game.showDebugLayer}}
      <div class="row">
        <div class="col">
          {{!log "this.camera.stage" this.camera.stage}}
          <div>
            Mouse: {{this.gameboard.currentHex}}
          </div>
          <div>
            Player: {{this.game.player.hex.colRowText}}
          </div>
            [{{this.game.player.sightRange}}]
          {{!#if showCameraDebug}}
            <div>
              Camera: {{this.camera.viewportWidth}} x {{this.camera.viewportHeight}}
            </div>
            <div>
              Window: {{this.camera.scrollContainerWidth}} x {{this.camera.scrollContainerHeight}}
            </div>
            <div>
              Map Offset: X:{{trunc this.camera.mapOffsetX}} Y:{{trunc this.camera.mapOffsetY}}
            </div>
            <div>
              Boundry: left:{{trunc this.camera.leftSightRangeBoundary}} right:{{trunc this.camera.rightSightRangeBoundary}}
            </div>
            <div>
              Boundry: top:{{trunc this.camera.topSightRangeBoundary}} bottom:{{trunc this.camera.bottomSightRangeBoundary}}
            </div>
            <div>
              Hexes: {{this.camera.maxNumberOfVisibleHexesX}} x {{this.camera.maxNumberOfVisibleHexesY}}<br />
            </div>
            <div>
              world width:{{this.camera.worldX}} height:{{this.camera.worldY}}
            </div>
            <div>
              hexes: width:{{this.mapService.currentLayout.hexWidth}} height:{{this.mapService.currentLayout.hexHeight}}
            </div>
            <div>
              top left: x:{{this.mapService.topLeftPoint.x}} y:{{this.mapService.topLeftPoint.y}}
            </div>
            <div>
              bottom right: x:{{this.mapService.bottomRightPoint.x}} y:{{this.mapService.bottomRightPoint.y}}
            </div>
          <div>
              Path Distance: {{this.gameboard.pathDistanceToMouseHex}}
            <p>pathFindingDebug {{this.game.pathFindingDebug}}</p>
          </div>
          <div>
            Player Health: {{this.game.player.healthPercentage}}%
          </div>
          <div>
            Player Flags: {{this.game.describePlayerFlags}}
          </div>
          <div>
            Ship: <p>{{!this.game.gameboard.shipHex}}</p>
          </div>
          <div>
            Ship Health: {{#if this.game.player.boardedTransport}}{{this.game.player.boardedTransport.healthPercentage}}%{{/if}}
          </div>
        </div>

      </div>
      {{/if}}
    </div>



<!--    <MiniMap @map={{!@model.mirageMap}} />-->


  </div>
</div>
